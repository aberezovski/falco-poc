- macro: spawned_process
  condition: (evt.type in (execve, execveat) and evt.dir=<)

- macro: container
  condition: (container.id != host)

- list: shell_binaries
  items: [ash, bash, csh, ksh, sh, tcsh, zsh, dash]

- macro: shell_procs
  condition: (proc.name in (shell_binaries))

- macro: container_entrypoint
  condition: (not proc.pname exists or proc.pname in (runc:[0:PARENT], runc:[1:CHILD], runc, docker-runc, exe, docker-runc-cur, containerd-shim, systemd, crio))

- rule: Terminal shell in container
  desc: >
    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have 
    legitimately already exited and be null (read container_entrypoint macro). Common when using "kubectl exec" in Kubernetes. 
    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). 
    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered 
    rules in this container/tty.
  condition: >
    spawned_process 
    and container
    and shell_procs 
    and proc.tty != 0
    and container_entrypoint
  output: A shell was spawned in a container with an attached terminal (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)
  priority: NOTICE
  tags: [maturity_stable, container, shell, mitre_execution, T1059]


- list: open_file_dir_event_types
  items: [open, openat]

- list: file_dir_open_programs
  items: [cat, vi, nano]

# - rule: program_accesses_file
#   desc: track whenever a set of programs opens a file
#   condition: >
#     evt.type in (open_file_dir_event_types)
#     and evt.dir=<
#     and proc.name in (file_dir_open_programs)
#   output: a tracked program opened a file (user=%user.name command=%proc.cmdline file=%fd.name)
#   priority: WARNING

# - list: common_event_types
#   items: [execve, execveat]

# - list: common_processes
#   items: [bash, sh, ls, rm, sleep]

# Falco custom rules collection

# - rule: Uncommon Process Execution
#   desc: Detects execution of an uncommon process
#   condition: >
#     evt.type in (common_event_types) and evt.dir=< and not proc.name in (common_processes)
#   output: >
#     Unexpected EXECVE process execution: 
#     process=%proc.name 
#     command=%proc.cmdline 
#     parent=%proc.pname 
#     path=%proc.cwd 
#     ( 
#       file=%fd.name 
#       gparent=%proc.aname[2] 
#       ggparent=%proc.aname[3] 
#       gggparent=%proc.aname[4] 
#       evt_type=%evt.type 
#       user=%user.name 
#       user_uid=%user.uid 
#       user_loginuid=%user.loginuid 
#       user_loginname=%user.loginname 
#       process=%proc.name 
#       proc_exepath=%proc.exepath 
#       parent=%proc.pname 
#       command=%proc.cmdline 
#       terminal=%proc.tty 
#       exe_flags=%evt.arg.flags 
#       %container.info
#     )
#   priority: WARNING

- list: shell_binaries
  items: [ash, bash, csh, ksh, sh, tcsh, zsh, dash]

- list: common_processes
  items: [bash, sh, ls, rm, sleep]

# Falco custom rules collection

- rule: Uncommon Process Execution on K8S Nodes
  desc: Detects execution of an uncommon process
  enabled: true
  condition: >
    container.id = host
    and evt.type in (execve, execveat) 
    and evt.dir=< 
    and not proc.name in (common_processes)
  output: >
    Unexpected EXECVE process execution: 
    process=%proc.name 
    command=%proc.cmdline 
    parent=%proc.pname 
    path=%proc.cwd 
    ( 
      file=%fd.name 
      gparent=%proc.aname[2] 
      ggparent=%proc.aname[3] 
      gggparent=%proc.aname[4] 
      evt_type=%evt.type 
      user=%user.name 
      user_uid=%user.uid 
      user_loginuid=%user.loginuid 
      user_loginname=%user.loginname 
      process=%proc.name 
      proc_exepath=%proc.exepath 
      parent=%proc.pname 
      command=%proc.cmdline 
      terminal=%proc.tty 
      exe_flags=%evt.arg.flags 
      %container.info
    )
  priority: WARNING

# Add conditions to this macro (probably in a separate file,
# overwriting this macro) to allow for specific combinations of
# programs changing users by calling setuid.
#
# In this file, it just takes one of the condition in the base macro
# and repeats it.
- macro: user_known_non_sudo_setuid_conditions
  condition: (user.name=root)

  # sshd, mail programs attempt to setuid to root even when running as non-root. Excluding here to avoid meaningless FPs
- rule: Non sudo setuid
  enabled: false
  desc: >
    Detect attempts to change users through the use of setuid, with exceptions for sudo/su. 
    The users "root" and "nobody" using setuid on themselves are also excluded, as setuid calls in these cases 
    typically involve reducing privileges. By setting the setuid bit, an attacker could execute code in a 
    different user's context, potentially with higher privileges. One drawback is the potential for noise, 
    as many applications legitimately use this approach.
  condition: >
    container.id = host
    and evt.type=setuid and evt.dir=>
    and not (user.name=root or user.uid=0)
    and not user_known_non_sudo_setuid_conditions
  output: Unexpected setuid call by non-sudo, non-root program (arg_uid=%evt.arg.uid evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)
  priority: NOTICE
  tags: [maturity_incubating, host, container, users, mitre_privilege_escalation, T1548.001]

#########################

- rule: Privileged actions on hosts
  desc: Detects execution of privileged actions performed on hosts
  enabled: true
  condition: >
    container.id = host
    and evt.type in (execve, execveat) and evt.dir=<
    and (user.uid = 0 or group.gid = 0) 
    and not system_users
    and (interactive or proc.aname in (shell_binaries)) and proc.tty != 0
    and not proc.name in (cron_binaries)
    and not ansible_running_python
    and not run_by_chef
  output: >
    Detected privileged action on host: 
    process=%proc.name
    command=%proc.cmdline 
    path=%proc.cwd 
    event=(%evt.type %evt.res %evt.rawres)
    ( 
      file=%fd.name
      parent=%proc.pname
      gparent=%proc.aname[2] ggparent=%proc.aname[3] aname[4]=%proc.aname[4] aname[5]=%proc.aname[5] aname[6]=%proc.aname[6] aname[7]=%proc.aname[7]
      user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid user_loginname=%user.loginname group_gid=%group.gid
      proc_exepath=%proc.exepath
      terminal=%proc.tty 
      exe_flags=%evt.arg.flags 
    )
  priority: WARNING
  tags: [privileged_actions, host]

- rule: Privileged actions on containers
  desc: Detects execution of privileged actions performed on containers
  enabled: true
  condition: >
    container.id != host
    and evt.type in (execve, execveat) and evt.dir=<
    and proc.tty != 0
  output: >
    Detected privileged action on container: 
    process=%proc.name
    command=%proc.cmdline 
    path=%proc.cwd 
    event=(%evt.type %evt.res %evt.rawres)
    ( 
      file=%fd.name
      parent=%proc.pname
      gparent=%proc.aname[2] ggparent=%proc.aname[3] aname[4]=%proc.aname[4] aname[5]=%proc.aname[5] aname[6]=%proc.aname[6] aname[7]=%proc.aname[7]
      user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid user_loginname=%user.loginname group_gid=%group.gid
      proc_exepath=%proc.exepath
      terminal=%proc.tty 
      exe_flags=%evt.arg.flags
      %container.info
    )
  priority: WARNING
  tags: [privileged_actions, container]
